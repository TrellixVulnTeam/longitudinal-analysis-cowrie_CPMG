import os
import click
from pyfiglet import Figlet
from remote import deploy_exec_remote, fetch_from_remote

__author__ = "d3roux"


@click.group()
def cli():
    """Map-Reduce tool to analyze cowrie log files on remote servers over time and create a visualization of the data.

    Uses multiple log files <cowrie.json.YYYY-MM-DD> to create a cummulated log file and a visualization.
    Log files can exist locally or being generated by cowrie on a remote droplet.

    LOCAL: python cli.py local --log-file-path  PATH

    REMOTE: python cli.py analyze-remote -i 123.456.789.10 -p 2112 -u root -pw pass
    """
    # f = Figlet(font='slant')
    # print(f.renderText('cowralyze'))
    pass


@click.command()
@click.option('--ip', '-i', help="IP Address of remote droplet")
@click.option('--port', '-p', help="Port of remote droplet (real SSH port of server, not cowrie port)")
@click.option('--user', '-u', default='root', help="Login username of remote droplet")
@click.option('--pw', '-pw', help="Login password of remote droplet")
def analyze_remote(ip, port, user, pw):
    deploy_exec_remote(ip, port, user, pw)
    fetch_from_remote(ip, port, user, pw)
    visualize()

@click.command()
@click.option('--logfile', '-f', default='reduced.json', help='Filename of reduced log file of generated *.json')
@click.option('--output', '-o', default='result.html', help='Filename of result visualization *.html')
def visualize(logfile, output):
    os.system(f"python visualize.py {logfile} {output}")


cli.add_command(analyze_remote)
cli.add_command(visualize)

if __name__ == "__main__":
    # !/usr/bin/env python3
    cli()
